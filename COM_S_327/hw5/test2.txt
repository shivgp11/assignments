203
For
this
assignment
you
will
work
with
a
hash
table
with
chaining
of
strings
All
code
should
be
written
in
C
Define
a
for
a
linked
list
node
whose
information
includes
a
single
string
and
an
unsigned
integer
count
Define
a
that
includes
a
pointer
to
a
dynamically-allocated
from
the
heap
array
of
pointers
to
and
the
size
of
the
array
as
an
unsigned
integer
Write
a
function
that
initializes
a
hash
table
The
prototype
should
be
On
input
T
points
to
an
existing
but
uninitialized
hashtable
struct
On
output
the
struct
should
be
initialized
to
an
empty
all
zero
pointers
hash
table
of
the
specified
size
Write
a
function
that
adds
a
string
to
a
hash
table
The
prototype
should
be
This
function
should
Compute
a
hash
for
the
string
using
the
value
of
Dan
Bernetein's
hash
function
for
strings
given
below
Search
the
linked
list
pointed
at
element
of
the
hash
table
for
a
node
containing
a
string
equal
to
str
If
such
a
node
is
found
then
increment
the
counter
in
node
If
no
such
node
is
found
then
create
a
new
node
whose
string
is
equal
to
str
and
initialize
its
counter
to
1
Add
this
node
to
the
front
of
the
linked
list
pointed
at
element
It
is
up
to
you
if
function
makes
a
copy
of
the
string
or
not
but
you
will
need
to
use
the
function
correctly
in
the
main
program
see
below
and
make
sure
there
are
no
memory
leaks
Write
a
function
that
displays
to
standard
output
all
nodes
in
a
hash
table
The
prototype
should
be
Specifically
for
each
list
in
hash
table
T
in
order
for
each
element
in
the
list
write
the
count
and
the
string
on
its
own
line
in
the
format
count
str
Using
the
above
functions
and
any
other
helper
functions
you
need
write
a
program
that
reads
from
standard
input
first
an
integer
on
its
own
line
specifying
the
size
of
hash
table
to
create
then
one
word
per
line
with
no
spaces
anywhere
Each
word
should
be
converted
to
lower
case
hint
see
function
and
added
to
the
hash
table
When
the
input
has
been
consumed
display
the
hash
table
counts
and
words
to
standard
output
You
may
assume
that
words
are
characters
long
or
shorter
you
may
exit
cleanly
with
an
appropriate
error
message
if
the
input
file
contains
any
words
that
are
too
long
Example
input
files
and
their
expected
outputs
will
be
posted
to
the
git
repository
for
class
As
a
short
example
the
input
should
have
corresponding
output
Collect
all
this
together
into
a
single
well-documented
file
named
and
upload
it
to
Canvas
Your
code
will
be
compiled
and
tested
on
pyrite
